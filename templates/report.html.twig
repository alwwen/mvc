{% extends "base.html.twig" %}

{% block title %}Report Page{% endblock %}

{% block body %}
    <h1>Report Page</h1>
    <div class="article">
        <header>
            <h1>Redovisningar</h1>
            <p class="author">Skriven av Alexander Winblad.</p>
        </header>
        <h2 id="kmom01">kmom01</h2>
        <ul>
            <li>
                <p>
                    Mina förkunskaper och förståelse kring objektorientering sedan tidigare är ändå ganska stor. På webbprogrammering har vi redan haft en kurs i OOPython. Jag gick tidigare på Civilingenjör i Spelutveckling 
                    då nästan alla programmeringskurser efter första python kursen var objektorienterat. Hade ett projekt i 3D-programmering och om man sätter upp det för att återanvända kod på ett bra sett blir nästan hela koden objektorienterad. 
                    Men det kan bli något nytt man kan få lära sig för har inte gjort det tidigare i PHP så ska bli intressant att förstå hur man sätter upp allt i PHP.
                </p>
            </li>
            <li>
                <p>
                    Jag tycker ändå det är ganska likt med hur man sätter upp klasser nu under kursmoment 1. Om jag inte förstått det fel så bygger i våra kontrollers så bygger vi på redan existerande klasser. 
                    Jag tänker att det första man behöver veta är vad en klass är och hur arv fungerar och sist hur import fungerar i PHP.
                </p>
            </li>
            <li>
                <p>
                    Jag uppfattar kodbasen nu efter att ha jobba med den som mycket tydligare. När man gjorde övningen och skulle sätta upp Symfony så var det mycket mappar och filer som man inte förstod vad de gjorde.
                    Men när man gjort om det en gång för report mappen blev det tydligare var allt skulle vara och hur saker är ihopkopplade. Har inte riktigt förstått mig på det med kopieringen av bilderna till 
                    build mappens images. I övningen så fick jag med massa random tecken efter orginalnamnet men fick det inte på report mappen så det ska jag kolla upp.
                </p>
            </li>
            <li>
                <p>
                    Det jag skulle vilja lära mig mer av och finner väldigt intessant är säkerhet på hemsidorna. Hur man skyddar sig mot SQL-injections och bryter upp olika delar för att få en säkrare hemsida. Något som är väldigt användbart 
                    så fort man har en databas som man ska koppla upp sig på där användare sparas så måste man använda password-hashing för att göra det säkert. Tycker också det var väldigt intressant och coolt att läsa om att om man vill skicka data 
                    till en user så ska man göra det med JSON och då använda json_decode och json_encode för att göra det säkert.
                </p>
            </li>
            <li>
                <p>
                    Min TIL för detta kursmomenten är hur man använder sig och sätter upp Symfony. Just det med att man har 
                    en build map på det sättet vi har använt de där css filen sparas och bilderna ifall man vill sätta upp det på det sättet. 
                    Det är något vi inte helt gjort tidigare och det är lite svårt att börja förstå sig på nu i början men hoppas det blir lättare.
                </p>
            </li>
        </ul>
        <h2 id="kmom02">kmom02</h2>
        <ul>
            <li>
                <p>
                    Arv används i PHP som i vilket programmeringsspråk som helst. Man har en basklass med metoder och sen har man klasser 
                    som ärver från basklassen. De klasser som ärver från basklassen kan använda sig av samma metoder som basklassen och även dess konstruktor.
                    Men den kan även ha sina egna metoder och konstruktor. Just för ett kortspel är det väldigt bra.
                    Komposition då inkluderar man en annan klass i samma fil som en annan klass och skapar instanser av den importerade klassen i den klassen som du skriver.
                    Interface fungerar som en mall för klasser som använder sig av det interfacet. I interfacet kan man sätta upp metoder men bara vad metoden ska heta och dess parametrar men ingen funktionalitet.
                    Jag skulle vilja jämföra det med hur man gör i C/C++ med cpp filer och hpp. Alltså hpp filen sätts upp som ett skal hur det ska fungera medans cpp filen har funktionaliteten. Skilladen mellan 
                    C/C++ och PHP Interface är att i C/C++ så gäller det den klassen med cpp/hpp filerna medans ett Interface är mer för flera klasser.
                    Trait används för att komma runt restriktionen kring att PHP endast kan köra 1 nivås arv. Då kan man sätta upp dessa i sin egna klass hierarki och använda det som ett extra "djup". 
                </p>
                <p>
                    Jag är ganska nöjd med min implementation. Jag började med klasserna då jag kände att det var det viktigaste att få rätt först. Sedan att lägga in de korrekt på hemsidan med routsen och twig filerna.
                    Jag hade ganska mycket problem med att få allt att fungera med twig filerna men efter jag läste på twigs egna hemsida gällande hur det fungerar släppte det.
                    Jag är missnöjd över en sak och det är samma sak som jag skulle vija förbättra också. Jag fick inte till det med att använda ett form med POST på sista API kravet som inte var optionellt.
                    Jag ville egentligen ha en input som tog in en siffra och uppdaterade pathen så att den skickades med där på korrekt sätt. Men eftersom jag inte kan veta siffran i förväg behövde jag dynamiskt uppdatera den 
                    vid submitten. Då hade jag behövt koppla in JS eller skickat vidare den först till en GET-Route som tog hand om det och sedan skickade vidare den till POST Routen. Blev inte som jag tänkte och fick inte till det 
                    så jag satte ett standard värde som skickas med är 3 så att man kan se att den fungerar iallafall då det inte stod något i kravet att man ska kunna ändra det.
                </p>
                <p>
                    Jag uppskattar att jobba med MVC. Det jag har lite svårt för är hur allt kopplas ihop just med Symfony. Tycker det är väldigt rörigt med GET och POST för tycker inte de sammarbetar så bra.
                    Hur man jobbar med Routes och sessionerna är inga problem. Det är just där med att skicka runt datan med GET och POST som jag har svårt för.
                </p>
                <p>
                    Min TIL för detta kursmomentet är ändå Routes och hur GET och POST fungerar i Symfony. Även om det är det svåraste för mig att få koll på 
                    så känner jag verkligen att jag har fått en bättre förståelse för det. I början av kursmomentet gick ingenting men efter mycket nötande så fungerar allt.
                    En liten extra TIL är att syntaxen för att "casta" om en variabel till en annan typ är mer likt C/C++ än Python. Det ser mer ut som syntaxen från C/C++ med pekare vilket 
                    jag tyckte var kul att se.
                </p>
            </li>
        </ul>
        <h2 id="kmom03">kmom03</h2>
        <ul>
            <li>
                <p>
                    Jag tyckte inte att göra ett flödesschema och pseudokod hjälpte mig med att stödja mig för uppgiften. Det gör det lite för större uppgifter 
                    men för denna uppgiften mde inte så mycket kod att skriva så göra jag redan det i huvudet medans jag skriver koden. Det behövs inte så mycket 
                    tanke på hur allt ska fungera ihop. Det är inte djupa arv och relationer i denna uppgiften i min mening. Men det är alltid bra att träna på 
                    till när man kommer till en större uppgift så man inte tappar bort sig och behöver skriva om all kod för att man inte tänker på slutdelarna av koden innan man kommer dit.
                </p>
            </li>
            <li>
                <p>
                    Jag är ganska nöjd med min implementation. En sak jag valde att göra som jag inte hade gjort ifall vi skulle kunna stödja flera olika typer av kortspelet var 
                    att sätta att handen är den som kollar om poängen är över 21 och sen kollar om det finns ett ess för att ge en mer korrekt poäng.
                    Det hade jag lagt i game klassen för denna ifall jag skulle ha flera olika typer av kortspel. Annars tycker jag att jag har fått en bra grund som går att bygga på med 
                    mer avancerade saker.
                </p>
            </li>
            <li>
                <p>
                    Jag tycker ändå det är rätt bra än så länge. Skulle säga att det är rätt tydligt just nu hur det fungerar men just nu är det inte så avancerat. 
                </p>
            </li>
            <li>
                <p>
                    Min TIL för detta kursmomentet är hur man kan skriva bättre kod. "composer lint" gav mig verkligen en tydligare 
                    blick på hur jag kan skriva min kod bättre. Jag har kört den på nivå 9 för phpstan. Så det har fått mig att inse hur jag kan skriva bättre kod.
                </p>
            </li>
        </ul>
        <h2 id="kmom04">kmom04</h2>
        <ul>
            <li>
                <p>
                    Jag tyckte det var ganska lätt att få igång allt med att jobba med phpunit. Hade lite svårt först med att få det att fungera 
                    i report mappen men läste nästa övning så då gick det snabbt. Jag upplever ändå att det är ganska lätt när man väl fått satt upp det. 
                    Jag älskar att man verkligen kan se vilka kodrader som man har testat vilket vi inte kunnat göra tidigare när vi kört tester i 
                    andra kurser.
                </p>
            </li>
            <li>
                <p>
                    Jag lyckades ganska bra skulle jag säga. Jag gjorde testerna för alla Card klasser och klassen för att hålla kolla på på spelet. Där fick jag 100% kodtäckning. Det var inte så svårt att få det förutom på ett ställe.
                    Det var svårt när jag hade ett exception att få det att fungera så jag fick googla runt lite för att kolla hur man kunde lösa det och hittade hur det fungerade.
                </p>
            </li>
            <li>
                <p>
                    Jag skulle säga att min kod är testbar. Vissa delar är lite svårare att testa men om man "mockade" vissa klasser som en annan klass använde sig av var det inga problem. Så utan mockning var det inte så lätt att testa, 
                    men med mockning var det inga problem alls och då gick allt att testa utan problem.
                </p>
            </li>
            <li>
                <p>
                    Nej det gjorde jag faktiskt inte. All min kod gick att testa med mockningen så behövde inte skriva om något. Så det känns bra och samtidigt så klagade inte phpstan på någon av koden eller testerna jag skrev.
                </p>
            </li>
            <li>
                <p>
                    Ja det har jag tänkt på. För att den ska vara så testbar som möjligt ska den vara uppdelad och inte göra för mycket saker i en metod. Det hjälper också att ha en bra strutkur på koden för att den ska vara
                    läsbar och lätt att förstå.
                </p>
            </li>
        </ul>
        <h2 id="kmom05">kmom05</h2>
        <h2 id="kmom06">kmom06</h2>
        <h2 id="kmom07/10">kmom07/10</h2>
    </div>
{% endblock %}